(def element-hierarchy
  (-> (make-hierarchy)

      (derive :context-boundary :architecture-model-node)
      (derive :enterprise-boundary :architecture-model-node)
      (derive :component :technical-architecture-model-node)
      (derive :container :technical-architecture-model-node)
      (derive :system :technical-architecture-model-node)
      (derive :person :architecture-model-node)
      (derive :dataflow :technical-architecture-model-relation)
      (derive :publish :technical-architecture-model-relation)
      (derive :rel :technical-architecture-model-relation)
      (derive :request :technical-architecture-model-relation)
      (derive :response :technical-architecture-model-relation)
      (derive :send :technical-architecture-model-relation)
      (derive :subscribe :technical-architecture-model-relation)
      (derive :technical-architecture-model-node :architecture-model-node)
      (derive :technical-architecture-model-node :technical-element)
      (derive :technical-architecture-model-relation :architecture-model-relation)
      (derive :technical-architecture-model-relation :technical-element)
      (derive :architecture-model-node :architecture-model-element)
      (derive :architecture-model-node :model-node)
      (derive :architecture-model-relation :architecture-model-element)
      (derive :architecture-model-relation :relational-element)
      (derive :architecture-model-relation :model-relation)
      (derive :architecture-model-element :model-element)
      (derive :architecture-model-element :identifiable-named-element)

      (derive :class :class-model-node)
      (derive :enum :class-model-node)
      (derive :enum-value :class-model-node)
      (derive :field :class-model-node)
      (derive :interface :class-model-node)
      (derive :namespace :class-model-node)
      (derive :method :class-model-node)
      (derive :package :class-model-node)
      (derive :parameter :class-model-node)
      (derive :protocol :class-model-node)
      (derive :association :class-model-relation)
      (derive :aggregation :class-model-relation)
      (derive :composition :class-model-relation)
      (derive :dependency :class-model-relation)
      (derive :implementation :class-model-relation)
      (derive :inheritance :class-model-relation)
      (derive :class-model-node :class-model-element)
      (derive :class-model-relation :class-model-element)
      (derive :class-model-relation :relational-element)
      (derive :class-model-element :model-element)
      (derive :class-model-element :technical-element)
      (derive :class-model-element :identifiable-named-element)

      (derive :concept :concept-model-node)
      (derive :container :concept-model-node)
      (derive :context-boundary :concept-model-node)
      (derive :enterprise-boundary :concept-model-node)
      (derive :person :concept-model-node)
      (derive :system :concept-model-node)
      (derive :has :concept-model-relation)
      (derive :is-a :concept-model-relation)
      (derive :rel :concept-model-relation)
      (derive :concept-model-node :concept-model-element)
      (derive :concept-model-relation :relational-element)
      (derive :concept-model-relation :concept-model-element)
      (derive :concept-model-element :model-element)
      (derive :concept-model-element :identifiable-named-element)

      (derive :container :deployment-model-node)
      (derive :node :deployment-model-node)
      (derive :deployed-to :deployment-model-relation)
      (derive :link :deployment-model-relation)
      (derive :deployment-model-node :deployment-model-element)
      (derive :deployment-model-node :model-node)
      (derive :deployment-model-relation :deployment-model-element)
      (derive :deployment-model-relation :model-relation)
      (derive :deployment-model-relation :relational-element)
      (derive :deployment-model-element :technical-element)
      (derive :deployment-model-element :identifiable-named-element)
      (derive :deployment-model-element :model-element)

      (derive :choice :state-machine-model-node)
      (derive :deep-history-state :state-machine-model-node)
      (derive :end-state :state-machine-model-node)
      (derive :fork :state-machine-model-node)
      (derive :join :state-machine-model-node)
      (derive :history-state :state-machine-model-node)
      (derive :start-state :state-machine-model-node)
      (derive :state :state-machine-model-node)
      (derive :transition :state-machine-model-relation)
      (derive :state-machine :state-machine-model-element)
      (derive :state-machine-model-node :state-machine-model-element)
      (derive :state-machine-model-node :model-node)
      (derive :state-machine-model-relation :model-relation)
      (derive :state-machine-model-relation :state-machine-model-element)
      (derive :state-machine-model-relation :relational-element)
      (derive :state-machine-model-element :model-element)
      (derive :state-machine-model-element :identifiable-named-element)

      (derive :actor :use-case-model-node)
      (derive :container :use-case-model-node)
      (derive :person :use-case-model-node)
      (derive :system :use-case-model-node)
      (derive :use-case :use-case-model-node)
      (derive :uses :use-case-model-relation)
      (derive :include :use-case-model-relation)
      (derive :extends :use-case-model-relation)
      (derive :generalizes :use-case-model-relation)
      (derive :use-case-model-node :model-node)
      (derive :use-case-model-node :use-case-model-element)
      (derive :use-case-model-relation :relational-element)
      (derive :use-case-model-relation :use-case-model-element)
      (derive :use-case-model-relation :model-relation)
      (derive :use-case-model-element :model-element)
      (derive :use-case-model-element :identifiable-named-element)

      (derive :architecture-view :view)
      (derive :class-view :view)
      (derive :component-view :architecture-view)
      (derive :concept-view :view)
      (derive :container-view :architecture-view)
      (derive :context-view :architecture-view)
      (derive :deployment-view :view)
      (derive :dynamic-view :architecture-view)
      (derive :glossary-view :view)
      (derive :state-machine-view :view)
      (derive :system-landscape-view :architecture-view)
      (derive :use-case-view :view)
      (derive :view :identifiable-element)

      (derive :context-boundary :boundary-node)
      (derive :enterprise-boundary :boundary-node)

      (derive :model-node :model-element)
      (derive :model-relation :model-element)

      (derive :relational-element :identifiable-element)
      (derive :compound-element :identifiable-element)
      (derive :identifiable-named-element :identifiable-element)
      (derive :identifiable-named-element :named-element)
      (derive :named-element :element)
      (derive :identifiable-element :element)))
