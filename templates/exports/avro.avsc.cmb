<%
;;;;
;;;; Export template for an avro schema
;;;;
;;;; config:
;;;;   :per-namespace true
;;;;

(def types->avro
  {"nil"              "null"
   "bytes"            "int"
   "short"            "short"
   "int"              "int"
   "long"             "long"
   "float"            "float"
   "double"           "double"
   "decimal"          "string"
   "boolean"          "boolean"
   "string"           "string"
   "array"            "array"
   "enum"             "enum"
   "map"              "map"
   "binary"           "bytes"
   "class"            "record"
   "uuid"             ["string" "uuid"]
   "date"             ["int" "date"]
   "time"             ["int" "time-millis"]
   "date-time-offset" ["long" "local-timestamp-millis"]
   ;"duration"         ""
   })

(defn avro-type
  "Returns the avro type of the model type of element `e`."
  [e-type]
  (let [t (get types->avro e-type e-type)]
    (if (vector? t)
      {:type (first t)
       :logical-type (second t)}
      t)))

(defn unqualified-name
  "Returns the unqualified name."
  [name]
  (last (str/split name #"\.")))

(defmulti model->avro
  "Renders the AVRO representation of the model element `e`."
  model/element-type)

(defmethod model->avro :class
  [schema-ns config e]
  {:type "record"
   :name (:name e)
   :doc (if-let [doc (:desc e)] doc "")
   :fields (into []
                 (map (partial model->avro schema-ns config)
                      (:ct e)))})

(defmethod model->avro :enum
  [e]
  {:type "enum"
   :name (:name e)
   :doc (if-let [doc (:desc e)] doc "")
   :symbols (into [] (map model->avro (:ct e)))})

(defmethod model->avro :enum-value
  [e]
  (:name e))

(defmethod model->avro :field
  [e]
  (cond
    (:collection e)
    {:name (:name e)
     :doc (if-let [doc (:desc e)] doc "")
     :type {:type "array"
            :items (avro-type (:type e))
            :default []}}

    (:map e)
    {:name (:name e)
     :doc (if-let [doc (:desc e)] doc "")
     :type {:type "map"
            :values (avro-type (:type e))
            :default {}}}

    (:optional e)
    {:name (:name e)
     :doc (if-let [doc (:desc e)] doc "")
     :type ["null" (avro-type (:type e))]}

    :else
    {:name (:name e)
    :doc (if-let [doc (:desc e)] doc "")
    :type (avro-type (:type e))}))

(defmethod model->avro :namespace
  "Returns an avro namespace for the model namespace."
  [e]
  (->> e
       (m/children)
       (map model->avro)
       (into [])))
%>

<%
%>