<%
;;;;
;;;; Template for a PlantUML WBS diagram of the Structure Views
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true

;;; Maps
(def directions
  "Maps direction keys to PlantUML UML directions."
  {:down  "down"
   :left  "left"
   :right "right"
   :up    "up"})

(def visibility
  "Maps visibility keys to PlantUML UML directions."
  {:private         "-"
   :protected       "#"
   :package         "~"
   :public          "+"})

(def cardinality
  "Maps cardinality keys to PlantUML UML cardinalities."
  {:zero-to-one  "0..1"
   :zero-to-many "0..n"
   :one          "1"
   :one-to-many  "1..n"})

(def layouts
  "Maps layout keys to PlantUML UML directives."
  {:top-down   "top to bottom direction"
   :left-right "left to right direction"})

(def linetypes
  "Maps linetype keys to PlantUML C4."
  {:orthogonal "skinparam linetype ortho"
   :polygonal  "skinparam linetype polyline"})

(def hides
  "Maps view-types to PlantUML UML hide directives for more compact layouts."
  {:state-view "hide empty description"
   :code-view "hide empty members"})

(def use-case-level->color
  "Maps the use case level to a color."
  {:summary "#FFFFFF"
   :user-goal "#BBBBFF"
   :subfunction "#8888DD"})

;;;
;;; Render functions
;;;
(defn indent
  "Renders an indent of n space chars."
  [n]
  (str/join (repeat n " ")))

(defn render-name
  "Renders the name of the element `e`. If `e` has a :link entry, a link is rendered."
  [e]
  (if-let [link (:link e)]
    (if (keyword? link)
      (str "[[" (link e) " " (el/element-name e) "]]")
      (str "[[" link " " (el/element-name e) "]]"))
    (el/element-name e)))

(defn render-type
  "Renders the type of the element `e`. If `e` is a keyword, it is resolved as element the model"
  [model e]
  (if-let [type (:type e)]
    (if (keyword? type)
      (let [type-ref (model/resolve-element model type)]
        (el/element-name type-ref))
      type)
    ; TODO default type?
    ""
    ))

(defn render-title
  "Renders the title of the diagram."
  [view]
  (when-let [title (view/title view)]
    (str "title " title)))

(defn render-skinparams
  "Renders skinparams for the plantuml diagram."
  [view]
  (when-let [skinparams (get (view/plantuml-spec view) :skinparams)]
    (doseq [skinparam skinparams]
%>skinparam <%= k %> <%= v %>
<%)))

(defmulti render-uml-element
  "Renders a UML element in PlantUML.
   
   Multifunction dispatching on the value of the :el key of the element `e`."
  (fn [_ _ _ e] (:el e))
  :hierarchy #'m/element-hierarchy)

;;;
;;; Setup
;;;
(let [view e
       plantuml-spec (v/plantuml-spec view)
       elements (v/root-elements model (v/view-elements model view))
       root-nodes (filter m/model-node? elements)
       relations (filter m/model-relation? elements)
       rendered (v/elements-to-render model view (concat root-nodes relations))
       ]

%>@startuml
<%=(when (v/sketch-spec view)
      "skinparam handwritten true")%>
<%=(when (:compact view)
      (hides (:el view)))%>
<%=(when (v/layout-spec view)
      (layouts (v/layout-spec view)))%>
<%=(when (v/linetype-spec view)
      (linetypes (v/linetype-spec view)))%>
<%=(when (:node-separation plantuml-spec)
                (str "skinparam nodesep " (:node-separation plantuml-spec)))%>
<%=(when (:rank-separation plantuml-spec)
                (str "skinparam ranksep " (:rank-separation plantuml-spec)))%>
<%=(render-skinparams view)%>

<%=(render-title view)%>

' TODO render root elements

@enduml
<%)%>
' (generated by Overarch with template <%= (:template ctx) %>)
