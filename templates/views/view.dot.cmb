<%
;;;;
;;;; Template for a graph of the view as Graphviz Dot file
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;
(defn element-shape
  [e]
  (cond
    (= :person (:el e))
    "shape=box"

    (contains? #{:system :container :component} (:el e))
    (if (= :database (:subtype e))
      "shape=cylinder"
      "shape=box")
    
    (= :node (:el e))
    "shape=box3d"
    
    (contains? #{:capability :process} (:el e))
    "shape=box"

    (= :use-case (:el e))
    "shape=ellipse"
    
    (= :concept (:el e))
    "shape=ellipse"
    
    (contains? #{:package :namespace} (:el e))
    "shape=tab"
    
    (contains? #{:interface :class} (:el e))
    "shape=box"

    (contains? #{:state} (:el e))
    "shape=oval"

    (contains? #{:start-state} (:el e))
    "shape=circle"

    (contains? #{:end-state} (:el e))
    "shape=doublecircle"

    (contains? #{:organization :org-unit} (:el e))
    "shape=underline"

    :else
    ""))

(defn element-color
  [e]
  (cond
    (= :person (:el e))
    (if (:external e)
      "style=filled fillcolor=\"#686868\""
      "style=filled fillcolor=\"#08427b\"")

    (= :system (:el e))
    (if (:external e)
      "style=filled fillcolor=\"#999999\""
      "style=filled fillcolor=\"#1168bd\"")

    (= :container (:el e))
    (if (:external e)
      "style=filled fillcolor=\"#b3b3b3\""
      "style=filled fillcolor=\"#438dd5\"")

    (= :component (:el e))
    (if (:external e)
      "style=filled fillcolor=lightgrey"
      "style=filled fillcolor=\"#85bbf0\"")

    (= :use-case (:el e))
    "style=filled fillcolor=yellow"

    (= :concept (:el e))
    "style=filled fillcolor=\"#dddddd\""

    (= :organization (:el e))
    "style=filled fillcolor=lightgrey"

    (= :org-unit (:el e))
    "style=filled fillcolor=lightgrey"

    (contains? #{:start-state :end-state} (:el e))
    "style=filled fillcolor=black"

    :else
    ""))

(defn node-label
  "Returns the label of the `node` for the `view`."
  [node view]
  (if (= :model-view (:el view))
    (str "label=<<FONT POINT-SIZE=\"10\">«" (t/escape-html (name (:el node))) "»</FONT><BR/>" (t/escape-html (:name node)) ">"))
    (str "label=<<B>" (t/escape-html (:name node)) "</B><BR/><FONT POINT-SIZE=\"10\"><I>" (str/join "<BR/>" (map t/escape-html (t/multi-lines (:desc node)))) " </I></FONT>>"))

(defn relation-label
  "Returns the label of the `node` for the `view`."
  [node view]
  (if (= :model-view (:el view))
    (str "label=<<FONT POINT-SIZE=\"10\">«" (t/escape-html (name (:el node))) "»</FONT><BR/>" (t/escape-html (:name node)) ">"))
    (str "label=<" (t/escape-html (:name node)) "<BR/><FONT POINT-SIZE=\"10\"><I>" (str/join "<BR/>" (map t/escape-html (t/multi-lines (:desc node)))) " </I></FONT>>"))

(let [elements (v/view-elements model e)
      nodes (filterv m/model-node? elements)
      relations (filterv m/model-relation? elements)]

%>digraph "<%= (v/title e) %>" {
  labelloc= "t"
  label="<%= (v/title e) %>"
<%
  (when (= :left-right (v/layout-spec e))
%>  rankdir="LR"
<%
  )
%>
<%
  (when (= :orthogonal (v/linetype-spec e))
%>  splines=ortho
<%
  )
%>  layout=<%= (name (get-in e [:graphviz :engine] :dot)) %>
<%
  (doseq [node nodes]
%><%= (gv/id (:id node)) %> [<%= (element-shape node) %> <%= (element-color node) %> <%=(node-label node e)%>]
<%
  )
%> 
<%
  (doseq [rel relations]
%><%= (gv/id (:from rel)) %> -> <%= (gv/id (:to rel)) %> [<%=(relation-label rel e)%>]
<%
  )
%> 
}
<%
)
%>
// (generated by Overarch with template <%= (:template ctx) %>)
