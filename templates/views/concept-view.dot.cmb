<%
;;;;
;;;; Template for a Graphviz Dot Graph of the Concept View
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(let [elements (v/view-elements model e)
      nodes (filterv m/model-node? elements)
      relations (filterv m/model-relation? elements)
      concepts (filterv #(= :concept (:el %)) nodes)
      boundaries (filterv #(= :context-boundary (:el %)) nodes)]

%>digraph "<%= (v/title e) %>" {
labelloc= "t"
label="<%= (v/title e) %>"
<%
  (when (= :left-right (get-in view [:spec :layout]))
%>rankdir="LR"
<%
  )
%>
<%
  (when (seq boundaries)
%>
// context boundaries
<%
    (doseq [boundary boundaries]
      (when-let [children (filterv #(= :concept (:el %)) (m/children model boundary))]
%>subgraph <%= (gv/id (:id boundary)) %> {
  label=<<B><%=(:name boundary)%></B><BR/><FONT POINT-SIZE="10"><I><%=(:desc boundary)%> </I></FONT>>;
<%
        (doseq [concept children]
%>  <%= (gv/id (:id concept)) %>[label=<<B><%=(:name concept)%></B><BR/><FONT POINT-SIZE="10"><I><%=(:desc concept)%> </I></FONT>>, style="filled", fillcolor="#dddddd"]
<%    
        )
      )
%>
}
<%
    )
  )
%>
// nodes
<%
  (doseq [concept concepts]
%><%= (gv/id (:id concept)) %>[label=<<B><%=(:name concept)%></B><BR/><FONT POINT-SIZE="10"><I><%=(:desc concept)%> </I></FONT>>, style="filled", fillcolor="#dddddd"] 
<%
  )
%>
// relations
<%
  (doseq [rel relations]
%><%= (gv/id (:from rel)) %> -> <%= (gv/id (:to rel)) %> [label = <<%= (:name rel) %><BR/><FONT POINT-SIZE="10"><I><%= (:desc rel) %> </I></FONT>>]
<%
  )
%>
}
<%
)
%>
// (generated by Overarch with template <%= (:template ctx) %>)
