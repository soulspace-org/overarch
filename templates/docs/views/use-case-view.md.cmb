<%
;;;;
;;;; Documentation Template for a Use Case View
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(defn use-case-level
  "Renders the level of the use case `uc`."
  [uc]
  (if-let [level (:level uc)]
    (str/capitalize (name level))
    "---"))

(let [elements (v/view-elements model e)
      actors (filter #(and (m/model-node? %) (not= :use-case (:el %))) elements)
      use-cases (filter #(and (m/model-node? %) (= :use-case (:el %))) elements)]
%># <%= (:title e)%>

## Diagram
<%=(md/relative-view-link e e)%>

## Description
<%= (:desc e) %>
<%
  (when (:doc e)
%>
## Documentation
<%= (:doc e) %>
<%
  )
%>
## Actors
| Name | Type | Description |
|---|---|---|
<%
  (doseq [actor (sort-by :name actors)]
%>| <%= (md/relative-element-link e actor) %> | <%= (:el actor) %> | <%= (t/single-line (:desc actor)) %> | 
<%
  )
%>
## Use Cases
| Name | Level | Description |
|---|---|---|
<%
  (doseq [uc (sort-by :name use-cases)]
%>| <%= (md/relative-element-link e uc) %> | <%= (use-case-level uc) %> | <%= (t/single-line (:desc uc)) %> |
<%
  )
)
%>

(generated with <%= (:template ctx) %>)
