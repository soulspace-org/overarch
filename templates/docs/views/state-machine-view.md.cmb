<%
;;;;
;;;; Documentation Template for a State Machine View
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(defn render-state
  [state]
  (if (= :state (:el state))
    (md/relative-element-link e state)
    (:name state)))

(let [elements (v/view-elements model e)
      states (filter m/model-node? e)
      transitions (filter m/model-relation? e)]

%># <%= (:title e) %>

## Diagram
<%=(md/relative-view-link e e)%>

## Description
<%= (:desc e) %>
<%
  (when (:doc e)
%>
## Documentation
<%= (:doc e) %>
<%
  )
%>
## States
| Name | Type | Description |
|---|---|---|
<%
  (doseq [state (sort-by :name states)]
%>| <%= (render-state state) %> | <%= (:el state) %> | <%= (t/single-line (:desc state)) %> |
<%
  )
%>

## Transitions
| Name | From | To | Description |
|---|---|---|---|
<%
  (doseq [transition transitions]
%>|<%= (:name transition) %>|<%= (md/relative-element-link e (m/resolve-element model (:from transition))) %>|<%= (md/element-link (m/resolve-element model (:to transition))) %>|<%= (t/single-line (:name transition)) %>|
<%
  )
)
%>

(generated with <%= (:template ctx) %>)
