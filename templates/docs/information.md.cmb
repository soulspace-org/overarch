<%
;;;;
;;;; Documentation Template for Information
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(let [required-for (m/referred-nodes model e #{:required-for})
      capabilities (filter #(= :capability (:el %)) required-for)
      input-of (m/referred-nodes model e #{:input-of})
      output-of (m/referred-nodes model e #{:output-of})
      process-input (filter #(= :process (:el %)) input-of)
      process-output (filter #(= :process (:el %)) output-of)
]
    
%># <%= (:name e) %> (<%= (m/element-type e) %>)
## Description
<%= (:desc e) %>

<%
  (when (:doc e)
%>## Documentation
<%= (:doc e) %>

<%
  )

  (when (seq process-input)
%>
## Input Information for Process
| Name | Description |
|---|---|
<%
    (doseq [process (sort-by :name process-input)]
%>| <%= (md/relative-element-link e process) %> | <%= (t/single-line (:desc process)) %> |
<%
    )
  )

  (when (seq process-output)
%>
## Output Information of Process
| Name | Description |
|---|---|
<%
    (doseq [process (sort-by :name process-output)]
%>| <%= (md/relative-element-link e process) %> | <%= (t/single-line (:desc process)) %> |
<%
    )
  )

  (when (seq (:tags e))
%>
### Tags
<%= (str/join ", " (:tags e)) %>
<%
  )

)
%>

## Navigation
<%= (md/file-link "./views-in-namespace.md" "List of views in namespace") %>
<%= (md/relative-file-link e "views.md" "List of all Views") %>

(generated with <%= (:template ctx) %>)
