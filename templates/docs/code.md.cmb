<%
;;;;
;;;; Documentation Template for a Interfaces and Classes
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(let [parent (m/parent model e)
      children (sort-by :name (map (partial m/resolve-element model) (m/children model e)))
      implements (m/referred-nodes model e #{:implements})
      processes (filterv #(= :process (:el %)) implements)
      state-machines (filterv #(= :state-machine (:el %)) implements)
      requirements (filterv #(= :requirement (:el %)) implements)
      decisions (filterv #(= :decision (:el %)) implements)
      interfaces (m/interfaces model e)
      superclasses (m/superclasses model e)
      subclasses (m/subclasses model e)
      fields  (filterv #(= :field (:el %)) children)
      methods (filterv #(= :method (:el %)) children)]

%># <%= (:name e) %> (<%= (m/element-type e) %>)

## Description
<%= (:desc e) %>

<%
  (when (:doc e)
%>
## Documentation
<%= (:doc e) %>
<%
  )

  (when parent
%>## Parent
<%= (md/relative-element-link e parent) %>
<%
  )

  (when (seq processes)
%>## Implemented Processes

| Process | Description |
|---|---|
<%
    (doseq [process (sort-by :name processes)]
%>| <%= (md/relative-element-link e process)%>| <%= (t/single-line (:desc process)) %> |
<%
    )
  )

  (when (seq state-machines)
%>## Implemented State Mchines

| State Machine | Description |
|---|---|
<%
    (doseq [state-machine (sort-by :name state-machines)]
%>| <%= (md/relative-element-link e state-machine)%>| <%= (t/single-line (:desc state-machine)) %> |
<%
    )
  )

  (when (seq requirements)
%>## Implemented Requirements

| Requirement | Description |
|---|---|
<%
    (doseq [requirement (sort-by :name requirements)]
%>| <%= (md/relative-element-link e requirement)%>| <%= (t/single-line (:desc requirement)) %> |
<%
    )
  )

  (when (seq decisions)
%>## Implemented Decisions

| Decision | Description |
|---|---|
<%
    (doseq [decision (sort-by :name decisions)]
%>| <%= (md/relative-element-link e decision)%>| <%= (t/single-line (:desc decision)) %> |
<%
    )
  )

  (when (seq interfaces)
%>
## Extended/Implemented Interfaces
<%=(str/join ", " (map #(md/relative-element-link e %) interfaces))%>
<%
  )

  (when (seq superclasses)
%>
## Superclasses
<%=(str/join ", " (map #(md/relative-element-link e %) superclasses))%>
<%
  )

  (when (seq subclasses)
%>
## Subclasses
<%=(str/join ", " (map #(md/relative-element-link e %) subclasses))%>
<%
  )

  (when (seq fields)
%>
## Fields
<%
    (doseq [field (sort-by :name fields)]
%>### <%= (:name field) %>
<%= (:type field) %> <%= (:name field) %>
 
<%= (t/single-line (:desc field)) %>
<%
    ))

  (when (seq methods)
%>
## Methods
<%
    (doseq [method (sort-by :name methods)]
      (let [parameters (m/children model e)]
%>###  <%= (:name method) %>
<%= (:type method) %> <%= (:name method) %>(<%= (str/join ", " (map :name parameters)) %>)

<%= (t/single-line (:desc method)) %>
<%
      )
    )
  )

  (when (seq (:tags e))
%>
### Tags
<%= (str/join ", " (:tags e)) %>
<%
  )

)
%>

## Navigation
<%= (md/file-link "./views-in-namespace.md" "List of views in namespace") %>
<%= (md/relative-file-link e "views.md" "List of all Views") %>

(generated with <%= (:template ctx) %>)
