<%
;;;;
;;;; Documentation Template for a Interfaces and Classes
;;;;
;;;; config:
;;;;  :per-element true
;;;;  :id-as-name  true
;;;;

(let [children (sort-by :name (map (partial m/resolve-element model) (m/children model e)))
      interfaces (m/interfaces model e)
      superclasses (m/superclasses model e)
      subclasses (m/subclasses model e)
      fields  (filter #(= :field (:el %)) children)
      methods (filter #(= :method (:el %)) children)]

%># <%= (:name e) %> (<%= (m/element-type e) %>)

## Description
<%= (:desc e) %>

<%
  (when (:doc e)
%>
## Documentation
<%= (:doc e) %>
<%
  )

  (when (seq interfaces)
%>
## Interfaces
<%=(str/join ", " (map #(md/relative-element-link e %) interfaces))%>
<%
  )

  (when (seq superclasses)
%>
## Superclasses
<%=(str/join ", " (map #(md/relative-element-link e %) superclasses))%>
<%
  )

  (when (seq subclasses)
%>
## Subclasses
<%=(str/join ", " (map #(md/relative-element-link e %) subclasses))%>
<%
  )

  (when (seq fields)
%>
## Fields
<%
    (doseq [field (sort-by :name fields)]
%>### <%= (:name field) %>
<%= (:type field) %> <%= (:name field) %>
 
<%= (t/single-line (:desc field)) %>
<%
    ))

  (when (seq methods)
%>
## Methods
<%
    (doseq [method (sort-by :name methods)]
      (let [parameters (m/children model e)]
%>###  <%= (:name method) %>
<%= (:type method) %> <%= (:name method) %>(<%= (str/join ", " (map :name parameters)) %>)

<%= (t/single-line (:desc method)) %>
<%
      ))))
%>

(generated with <%= (:template ctx) %>)
